{"notebook_name":"juliaset.ipynb"}
"#Julia Set\n###Cormac O'Connor"︡{"metadata":{},"cell_type":"markdown"}
"import cmath\nimport numpy as np\n\nclass JuliaSet:\n    def __init__(self, c, n = 100):\n        self.c = c\n        self.n = n\n        self._d = .001\n    \n    def juliamap(self, z):\n        return z ** 2 + self.c\n    \n    def iterate(self, z):\n        for m in np.arange(1, self.n+1):\n            z = self.juliamap(z)\n            if abs(z) > 2:\n                return m\n        return 0\n    \n    \n    def setcomplexplane(self, _d):\n        x, y = -2, -2\n        self._complexplane = []\n        while (x <= 2 and y <= 2):\n            z = complex(x,y)\n            self._complexplane.append(z)\n            x = self._d + x\n            y = self._d + y\n        \n    def set_spacing(self, d):\n        self._d = d\n        self.setcomplexplane(d)\n        \n    \n    def generate(self):\n        self.set = []\n        for i in self._complexplane:\n            self.set.append(self.iterate(i))\n        return self.set\n        \n\n\njs=JuliaSet(complex(-0.3,0.3),100)\njs.set_spacing(.1)\nprint js.generate()\n\n"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":43,"outputs":[{"output_type":"stream","text":"[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 4, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n","name":"stdout"}]}
"%timeit JuliaSet"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":44,"outputs":[{"output_type":"stream","text":"10000000 loops, best of 3: 97.6 ns per loop\n","name":"stdout"}]}
"%time JuliaSet"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":45,"outputs":[{"output_type":"stream","text":"CPU times: user 0 ns, sys: 0 ns, total: 0 ns\nWall time: 8.82 µs\n","name":"stdout"},{"output_type":"execute_result","data":{"text/plain":"<class __main__.JuliaSet at 0x7fdb5cdcf390>"},"metadata":{},"execution_count":45}]}
"%prun JuliaSet"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":46,"outputs":[{"output_type":"stream","text":" ","name":"stdout"}]}
"%load_ext line_profiler"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":47,"outputs":[{"output_type":"stream","text":"The line_profiler extension is already loaded. To reload it, use:\n  %reload_ext line_profiler\n","name":"stdout"}]}
"%lprun JuliaSet"︡{"metadata":{"trusted":true,"collapsed":false},"cell_type":"code","execution_count":53,"outputs":[]}
""︡{"metadata":{"trusted":true,"collapsed":true},"cell_type":"code","execution_count":null,"outputs":[]}